name: Actions Entrypoint

on:
  push:
    # branches to consider in the event; optional, defaults to all
    branches:
      - "main" 

  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - closed

permissions:
  contents: write
  pull-requests: write

jobs:
  check-trigger:
    runs-on: ubuntu-latest
    environment: dev
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}
    steps:
      - name: Check if should run pipeline
        id: check
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            if [[ "${{ github.event.pull_request.merged }}" == "true" ]]; then
              echo "should_run=true" >> $GITHUB_OUTPUT
            else
              echo "should_run=false" >> $GITHUB_OUTPUT
            fi
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            # Check if push is from PR merge
            response=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/commits/${{ github.sha }}/pulls")
            
            if echo "$response" | jq -e '.[] | select(.merged_at != null)' > /dev/null; then
              echo "should_run=true" >> $GITHUB_OUTPUT
            else
              echo "should_run=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "should_run=false" >> $GITHUB_OUTPUT
          fi

  releasePreparation:
    runs-on: ubuntu-latest
    environment: dev
    needs: [check-trigger]

    if: needs.check-trigger.outputs.should_run == 'true'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Authenticate GH CLI
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Initial Release (Lone Job)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Running initial release job..."
          python ${{ github.workspace }}/.github/workflows/src/initial_release.py

  dataReportJob:
    runs-on: ubuntu-latest
    environment: dev
    outputs:
      is_pr_merge: ${{ steps.check_pr.outputs.is_pr_merge }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Data (Lone Job)
        run: |
          echo "Running data job..."
          echo "Job Type: ${{ github.event_name }}"

      - name: Check if commit is from merged PR
        id: check_pr
        run: |
          # Get associated PRs for this commit
          response=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/commits/${{ github.sha }}/pulls")
          
          # Check if any PRs were returned and if they're merged
          if echo "$response" | jq -e '.[] | select(.merged_at != null)' > /dev/null; then
            echo "is_pr_merge=true" >> $GITHUB_OUTPUT
          else
            echo "is_pr_merge=false" >> $GITHUB_OUTPUT
          fi

  # This will run our unit tests on every push to the repository
  call-unit-tests:
    uses: ./.github/workflows/dry-unit-tests.yml

  # This will get our current version of the package from the pyproject.toml file
  # We will need this to use for comparison within the release draft
  call-versions:
    needs: [call-unit-tests]
    uses: ./.github/workflows/dry-versions.yml
    secrets:
      # This is automatically provided by GitHub Actions, so we don't need to specify it in the workflow
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test-versions:
    needs: [call-unit-tests, call-versions]
    runs-on: ubuntu-latest
    steps:
      - name: Check Versions
        run: |
          echo "Checking versions..."
          echo "Package Version: ${{ needs.call-versions.outputs.package_version }}"
          if [ "${{ needs.call-versions.outputs.latest_version }}" == "" ]; then
            echo "No Release Found!"
          else
            echo "Current Version: ${{ needs.call-versions.outputs.latest_version }}"
          fi
        shell: bash

  # This will set our version number of the draft release based on the pyproject.toml file, and if there
  # is a current version, it will be used as the base for the next release.
  # We will need this to use for comparison within the release draft.
  set-release-version:
    needs: [call-versions, test-versions, call-unit-tests]
    uses: ./.github/workflows/dry-draft-version.yml
    secrets:
      # This is automatically provided by GitHub Actions, so we don't need to specify it in the workflow
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update_release_draft:
    uses: ./.github/workflows/dry-release-drafter.yml
    needs: [set-release-version, releasePreparation]
    with:
      draft_version: ${{ needs.set-release-version.outputs.draft_version }}
    secrets:
      # This is automatically provided by GitHub Actions, so we don't need to specify it in the workflow
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
  # The build/push and deploy only run if this is a merged PR AND all previous jobs have succeeded
  # This ensures that we only build/deploy code that has passed all tests and checks
  #build_and_push:
  #  if: needs.dataReportJob.outputs.is_pr_merge == 'true'
  #  needs: [update_release_draft, releasePreparation, dataReportJob, set-release-version]
  #  uses: ./.github/workflows/dry-build-and-push.yml
  #  with:
  #    version: ${{ needs.set-release-version.outputs.draft_version }}
  #  secrets:
  #    region: ${{ secrets.REGION }}
  #    project_id: ${{ secrets.PROJECT_ID }}
  #    service_name: ${{ secrets.SERVICE_NAME }}
  #    service_account: ${{ secrets.SERVICE_ACCOUNT }}
#
  #deploy:
  #  if: needs.dataReportJob.outputs.is_pr_merge == 'true'
  #  needs: [update_release_draft, releasePreparation, dataReportJob, build_and_push]
  #  uses: ./.github/workflows/dry-cloudrun-deploy.yml
  #  with:
  #    deploy: 'false' # This must be set to 'true' to enable deployment
  #    environment: 'development'
  #  secrets:
  #    region: ${{ secrets.REGION }}
  #    project_id: ${{ secrets.PROJECT_ID }}
  #    service_name: ${{ secrets.SERVICE_NAME }}
  #    service_account: ${{ secrets.SERVICE_ACCOUNT }}
